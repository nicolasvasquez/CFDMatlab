%variable declarations
nx = 41;
ny = 41;
nt = 10;
nit = 50;
c = 1;
dx = 2 / (nx - 1);
dy = 2 / (ny - 1);
x = linspace(0, 2, nx);
y = linspace(0, 2, ny);
[X, Y] = meshgrid(x, y);


%physical variables
rho = 1;
nu = .1;
F = 1;
dt = .01;

%initial conditions
u = zeros(ny, nx);
un = zeros(ny, nx);

v = zeros(ny, nx);
vn = zeros(ny, nx);

p = ones(ny, nx);
pn = ones(ny, nx);

b = zeros(ny, nx);




udiff = 1;
stepcount = 0;

while udiff > .001
    un = u;
    vn = v;

    b = build_up_b(rho, dt, dx, dy, u, v);
    p = pressure_poisson_periodic(p, b, dx, dy, nit);

    u(2:end-1, 2:end-1) = (un(2:end-1, 2:end-1) - ...
        un(2:end-1, 2:end-1) * dt / dx * ...
        (un(2:end-1, 2:end-1) - un(2:end-1, 1:end-2)) - ...
        vn(2:end-1, 2:end-1) * dt / dy * ...
        (un(2:end-1, 2:end-1) - un(1:end-2, 2:end-1)) - ...
        dt / (2 * rho * dx) * ...
        (p(2:end-1, 3:end) - p(2:end-1, 1:end-2)) + ...
        nu * (dt / dx^2 * ...
        (un(2:end-1, 3:end) - 2 * un(2:end-1, 2:end-1) + un(2:end-1, 1:end-2)) + ...
        dt / dy^2 * ...
        (un(3:end, 2:end-1) - 2 * un(2:end-1, 2:end-1) + un(1:end-2, 2:end-1))) + ...
        F * dt);

    v(2:end-1, 2:end-1) = (vn(2:end-1, 2:end-1) - ...
        un(2:end-1, 2:end-1) * dt / dx * ...
        (vn(2:end-1, 2:end-1) - vn(2:end-1, 1:end-2)) - ...
        vn(2:end-1, 2:end-1) * dt / dy * ...
        (vn(2:end-1, 2:end-1) - vn(1:end-2, 2:end-1)) - ...
        dt / (2 * rho * dy) * ...
        (p(3:end, 2:end-1) - p(1:end-2, 2:end-1)) + ...
        nu * (dt / dx^2 * ...
        (vn(2:end-1, 3:end) - 2 * vn(2:end-1, 2:end-1) + vn(2:end-1, 1:end-2)) + ...
        dt / dy^2 * ...
        (vn(3:end, 2:end-1) - 2 * vn(2:end-1, 2:end-1) + vn(1:end-2, 2:end-1))));

    % Periodic BC u @ x = 2
    u(2:end-1, end) = (un(2:end-1, end) - un(2:end-1, end) * (dt / dx) .* ...
        (un(2:end-1, end) - un(2:end-1, end-1)) - ...
        vn(2:end-1, end) * (dt / dy) .* ...
        (un(2:end-1, end) - un(1:end-2, end)) - ...
        dt / (2 * rho * dx) * ...
        (p(2:end-1, 1) - p(2:end-1, end-1)) + ...
        nu * (dt / dx^2 * ...
        (un(2:end-1, 1) - 2 * un(2:end-1, end) + un(2:end-1, end-1)) + ...
        dt / dy^2 * ...
        (un(3:end, end) - 2 * un(2:end-1, end) + un(1:end-2, end))) + F * dt);

    % Periodic BC u @ x = 0
    u(2:end-1, 1) = (un(2:end-1, 1) - un(2:end-1, 1) * (dt / dx) .* ...
        (un(2:end-1, 1) - un(2:end-1, end)) - ...
        vn(2:end-1, 1) * (dt / dy) .* ...
        (un(2:end-1, 1) - un(1:end-2, 1)) - ...
        dt / (2 * rho * dx) * ...
        (p(2:end-1, 2) - p(2:end-1, end)) + ...
        nu * (dt / dx^2 * ...
        (un(2:end-1, 2) - 2 * un(2:end-1, 1) + un(2:end-1, end)) + ...
        dt / dy^2 * ...
        (un(3:end, 1) - 2 * un(2:end-1, 1) + un(1:end-2, 1))) + F * dt);

    % Periodic BC v @ x = 2
    v(2:end-1, end) = (vn(2:end-1, end) - un(2:end-1, end) * (dt / dx) .* ...
        (vn(2:end-1, end) - vn(2:end-1, end-1)) - ...
        vn(2:end-1, end) * (dt / dy) .* ...
        (vn(2:end-1, end) - vn(1:end-2, end)) - ...
        dt / (2 * rho * dy) * ...
        (p(3:end, end) - p(1:end-2, end)) + ...
        nu * (dt / dx^2 * ...
        (vn(2:end-1, 1) - 2 * vn(2:end-1, end) + vn(2:end-1, end-1)) + ...
        dt / dy^2 * ...
        (vn(3:end, end) - 2 * vn(2:end-1, end) + vn(1:end-2, end))));

    % Periodic BC v @ x = 0
    v(2:end-1, 1) = (vn(2:end-1, 1) - un(2:end-1, 1) * (dt / dx) .* ...
        (vn(2:end-1, 1) - vn(2:end-1, end)) - ...
        vn(2:end-1, 1) * (dt / dy) .* ...
        (vn(2:end-1, 1) - vn(1:end-2, 1)) - ...
        dt / (2 * rho * dy) * ...
        (p(3:end, 1) - p(1:end-2, 1)) + ...
        nu * (dt / dx^2 * ...
        (vn(2:end-1, 2) - 2 * vn(2:end-1, 1) + vn(2:end-1, end)) + ...
        dt / dy^2 * ...
        (vn(3:end, 1) - 2 * vn(2:end-1, 1) + vn(1:end-2, 1))));


    % Wall BC: u,v = 0 @ y = 0,2
    u(1, :) = 0;
    u(end, :) = 0;
    v(1, :) = 0;
    v(end, :) = 0;

    udiff = (sum(u) - sum(un)) / sum(u);
    stepcount = stepcount + 1;
    quiver(x,y,u.',v.',1);
    pause(0.01);
end

xlabel('x')
ylabel('y')
colorbar
title(['stepcount   ' , num2str(stepcount)])

function y = build_up_b(rho, dt, dx, dy, u, v)
    b = zeros(size(u), 'like', u);
    
    b(2:end-1, 2:end-1) = (rho * (1 / dt * ((u(2:end-1, 3:end) - u(2:end-1, 1:end-2)) / (2 * dx) + ...
        (v(3:end, 2:end-1) - v(1:end-2, 2:end-1)) / (2 * dy)) - ...
        ((u(2:end-1, 3:end) - u(2:end-1, 1:end-2)) / (2 * dx))^2 - ...
        2 * ((u(3:end, 2:end-1) - u(1:end-2, 2:end-1)) / (2 * dy) * ...
        (v(2:end-1, 3:end) - v(2:end-1, 1:end-2)) / (2 * dx))- ...
        ((v(3:end, 2:end-1) - v(1:end-2, 2:end-1)) / (2 * dy))^2));

    % Periodic BC Pressure @ x = 2
    b(2:end-1, end) = (rho * (1 / dt * ((u(2:end-1, 1) - u(2:end-1,end-1)) / (2 * dx) + ...
        (v(3:end, end) - v(1:end-2, end)) / (2 * dy)) - ...
        ((u(2:end-1, 1) - u(2:end-1, end-1)) / (2 * dx)).^2 - ...
        2 * ((u(3:end, end) - u(1:end-2, end)) / (2 * dy) .* ...
        (v(2:end-1, 1) - v(2:end-1, end-1)) / (2 * dx)) - ...
        ((v(3:end, end) - v(1:end-2, end)) / (2 * dy)).^2));

    % Periodic BC Pressure @ x = 0
    b(2:end-1, 1) = (rho * (1 / dt * ((u(2:end-1, 2) - u(2:end-1, end)) / (2 * dx) + ...
        (v(3:end, 1) - v(1:end-2, 1)) / (2 * dy)) - ...
        ((u(2:end-1, 2) - u(2:end-1, end)) / (2 * dx)).^2 - ...
        2 * ((u(3:end, 1) - u(1:end-2, 1)) / (2 * dy) .* ...
        (v(2:end-1, 2) - v(2:end-1, end)) / (2 * dx))- ...
        ((v(3:end, 1) - v(1:end-2, 1)) / (2 * dy)).^2));
    y = b;
end

function y = pressure_poisson_periodic(p, b, dx, dy, nit)
    %pn = numpy.empty_like(p);

    for q = 1:nit
        pn = p;
        p(2:end-1, 2:end-1) = (((pn(2:end-1, 3:end) + pn(2:end-1, 1:end-2)) * dy^2 + ...
            (pn(3:end, 2:end-1) + pn(1:end-2, 2:end-1)) * dx^2) / ...
            (2 * (dx^2 + dy^2)) - ...
            dx^2 * dy^2 / (2 * (dx^2 + dy^2)) * b(2:end-1, 2:end-1));

        %Periodic BC Pressure @ x = 2
        p(2:end-1, end) = (((pn(2:end-1, 1) + pn(2:end-1, end-1))* dy^2 + ...
            (pn(3:end, end) + pn(1:end-2, end)) * dx^2) / ...
            (2 * (dx^2 + dy^2)) - ...
            dx^2 * dy^2 / (2 * (dx^2 + dy^2)) * b(2:end-1, end));

        %Periodic BC Pressure @ x = 0
        p(2:end-1, 1) = (((pn(2:end-1, 2) + pn(2:end-1, end))* dy^2 + ...
            (pn(3:end, 1) + pn(1:end-2, 1)) * dx^2) / ...
            (2 * (dx^2 + dy^2)) - ...
            dx^2 * dy^2 / (2 * (dx^2 + dy^2)) * b(2:end-1, 1));

        %Wall boundary conditions, pressure
        p(end, :) = p(end-1, :);  % dp/dy = 0 at y = 2
        p(1, :) = p(2, :);  % dp/dy = 0 at y = 0
    end
    y = p;
end
